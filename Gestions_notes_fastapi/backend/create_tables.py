# create_tables.py
import sys
import os

# Ajouter le r√©pertoire courant au Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from database.database import Base, engine
    from models.utilisateurs import Utilisateur
    
    # Importez TOUS vos mod√®les ici - c'est CRITIQUE
    print("üîÑ Importation des mod√®les...")
    
    # Essayer d'importer tous les mod√®les possibles
    try:
        from models.notes import Note
        print("‚úÖ Mod√®le Note import√©")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Mod√®le Note non trouv√©: {e}")
    
    try:
        from models.partage_note import PartageNote
        print("‚úÖ Mod√®le PartageNote import√©")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Mod√®le PartageNote non trouv√©: {e}")
    
    try:
        from models.tag import Tag
        print("‚úÖ Mod√®le Tag import√©")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Mod√®le Tag non trouv√©: {e}")
    
    try:
        from models.tag import Tag
        print("‚úÖ Mod√®le Tag import√©")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Mod√®le NoteTag non trouv√©: {e}")
    
    # Ou si vous avez un fichier qui importe tout
    try:
        from models import *
        print("‚úÖ Tous les mod√®les import√©s via models.__init__")
    except ImportError as e:
        print(f"‚ö†Ô∏è  Import global des mod√®les √©chou√©: {e}")
    
    print("üîÑ Importation des mod√®les termin√©e...")
except ImportError as e:
    print(f"‚ùå Erreur d'importation : {e}")
    print("V√©rifiez que tous vos fichiers de mod√®les et de base de donn√©es existent.")
    sys.exit(1)

def create_all_tables():
    """Cr√©er toutes les tables dans la base de donn√©es"""
    try:
        print("üîÑ Cr√©ation des tables en cours...")
        
        # Afficher tous les mod√®les qui seront cr√©√©s
        print("üìã Mod√®les d√©tect√©s:")
        for table_name, table in Base.metadata.tables.items():
            print(f"  - {table_name}")
            
        # Cr√©er toutes les tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s !")
        
        # V√©rifier que les tables existent
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        
        if tables:
            print(f"üìã Tables cr√©√©es dans la DB : {tables}")
        else:
            print("‚ö†Ô∏è  Aucune table trouv√©e. V√©rifiez vos mod√®les.")
            
        # Test de connexion simple
        from database.database import SessionLocal
        db = SessionLocal()
        try:
            # Essayer une requ√™te simple pour v√©rifier que tout fonctionne
            result = db.execute("SELECT name FROM sqlite_master WHERE type='table';")
            db_tables = [row[0] for row in result.fetchall()]
            print(f"üîç Tables dans la base de donn√©es : {db_tables}")
            
            # V√©rifier sp√©cifiquement la table utilisateurs
            if 'utilisateurs' in db_tables:
                print("‚úÖ Table 'utilisateurs' cr√©√©e avec succ√®s !")
            else:
                print("‚ùå Table 'utilisateurs' non trouv√©e !")
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
        print(f"Type d'erreur : {type(e).__name__}")
        
        # Afficher plus de d√©tails sur l'erreur
        if "Foreign key" in str(e):
            print("\nüîç Probl√®me de cl√© √©trang√®re d√©tect√© !")
            print("V√©rifiez que tous vos mod√®les sont import√©s dans le bon ordre.")
            print("Les mod√®les r√©f√©renc√©s par des cl√©s √©trang√®res doivent √™tre import√©s en premier.")
            
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ D√©marrage du script de cr√©ation des tables...")
    create_all_tables()
    print("‚úÖ Script termin√©.")